/* tslint:disable */
/* eslint-disable */
/**
 * Computer Vision Image Verification API
 * FastAPI backend for the Computer Vision Image Verification sample.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddFileRequest,
  AddFileResponse,
  AddressAutocompleteResponse,
  Agent,
  AgentListResponse,
  AssessmentStatus,
  CollectionFilePresignedUrlsResponse,
  CollectionResponse,
  CollectionsListResponse,
  ConfigResponse,
  CoordinatesRequest,
  CoordinatesResponse,
  CreateAgentRequest,
  CreateCollectionRequest,
  CreateCollectionResponse,
  CreateItemRequest,
  CreateVerificationJobRequest,
  CreateVerificationJobResponse,
  GenerateUploadUrlsRequest,
  GenerateUploadUrlsResponse,
  HTTPValidationError,
  HealthResponse,
  Item,
  ItemListResponse,
  ModelIdRequest,
  PresignUploadResponse,
  SystemPromptRequest,
  TestDescriptionFilterPromptRequest,
  TestDescriptionFilterPromptResponse,
  TestLabelFilteringRuleRequest,
  TestLabelFilteringRuleResponse,
  UpdateAgentRequest,
  UpdateCollectionRequest,
  UpdateCollectionResponse,
  UpdateItemRequest,
  UpdateVerificationJobRequest,
  UpdateVerificationJobResponse,
  VerificationJobDto,
  VerificationJobFilePresignedUrlsResponse,
  VerificationJobLogListResponse,
  VerificationJobResponse,
  VerificationJobSecondPassRequest,
} from '../models/index';
import {
    AddFileRequestFromJSON,
    AddFileRequestToJSON,
    AddFileResponseFromJSON,
    AddFileResponseToJSON,
    AddressAutocompleteResponseFromJSON,
    AddressAutocompleteResponseToJSON,
    AgentFromJSON,
    AgentToJSON,
    AgentListResponseFromJSON,
    AgentListResponseToJSON,
    AssessmentStatusFromJSON,
    AssessmentStatusToJSON,
    CollectionFilePresignedUrlsResponseFromJSON,
    CollectionFilePresignedUrlsResponseToJSON,
    CollectionResponseFromJSON,
    CollectionResponseToJSON,
    CollectionsListResponseFromJSON,
    CollectionsListResponseToJSON,
    ConfigResponseFromJSON,
    ConfigResponseToJSON,
    CoordinatesRequestFromJSON,
    CoordinatesRequestToJSON,
    CoordinatesResponseFromJSON,
    CoordinatesResponseToJSON,
    CreateAgentRequestFromJSON,
    CreateAgentRequestToJSON,
    CreateCollectionRequestFromJSON,
    CreateCollectionRequestToJSON,
    CreateCollectionResponseFromJSON,
    CreateCollectionResponseToJSON,
    CreateItemRequestFromJSON,
    CreateItemRequestToJSON,
    CreateVerificationJobRequestFromJSON,
    CreateVerificationJobRequestToJSON,
    CreateVerificationJobResponseFromJSON,
    CreateVerificationJobResponseToJSON,
    GenerateUploadUrlsRequestFromJSON,
    GenerateUploadUrlsRequestToJSON,
    GenerateUploadUrlsResponseFromJSON,
    GenerateUploadUrlsResponseToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    HealthResponseFromJSON,
    HealthResponseToJSON,
    ItemFromJSON,
    ItemToJSON,
    ItemListResponseFromJSON,
    ItemListResponseToJSON,
    ModelIdRequestFromJSON,
    ModelIdRequestToJSON,
    PresignUploadResponseFromJSON,
    PresignUploadResponseToJSON,
    SystemPromptRequestFromJSON,
    SystemPromptRequestToJSON,
    TestDescriptionFilterPromptRequestFromJSON,
    TestDescriptionFilterPromptRequestToJSON,
    TestDescriptionFilterPromptResponseFromJSON,
    TestDescriptionFilterPromptResponseToJSON,
    TestLabelFilteringRuleRequestFromJSON,
    TestLabelFilteringRuleRequestToJSON,
    TestLabelFilteringRuleResponseFromJSON,
    TestLabelFilteringRuleResponseToJSON,
    UpdateAgentRequestFromJSON,
    UpdateAgentRequestToJSON,
    UpdateCollectionRequestFromJSON,
    UpdateCollectionRequestToJSON,
    UpdateCollectionResponseFromJSON,
    UpdateCollectionResponseToJSON,
    UpdateItemRequestFromJSON,
    UpdateItemRequestToJSON,
    UpdateVerificationJobRequestFromJSON,
    UpdateVerificationJobRequestToJSON,
    UpdateVerificationJobResponseFromJSON,
    UpdateVerificationJobResponseToJSON,
    VerificationJobDtoFromJSON,
    VerificationJobDtoToJSON,
    VerificationJobFilePresignedUrlsResponseFromJSON,
    VerificationJobFilePresignedUrlsResponseToJSON,
    VerificationJobLogListResponseFromJSON,
    VerificationJobLogListResponseToJSON,
    VerificationJobResponseFromJSON,
    VerificationJobResponseToJSON,
    VerificationJobSecondPassRequestFromJSON,
    VerificationJobSecondPassRequestToJSON,
} from '../models/index';

export interface AddFileToCollectionCollectionsCollectionIdFilesPostRequest {
    collectionId: string;
    addFileRequest: AddFileRequest;
}

export interface AddressAutocompleteCollectionsAddressAutocompleteGetRequest {
    query: string;
}

export interface CreateAgentAgentsPostRequest {
    createAgentRequest: CreateAgentRequest;
}

export interface CreateCollectionCollectionsPostRequest {
    createCollectionRequest: CreateCollectionRequest;
}

export interface CreateItemItemsPostRequest {
    createItemRequest: CreateItemRequest;
}

export interface CreateVerificationJobVerificationJobsPostRequest {
    createVerificationJobRequest: CreateVerificationJobRequest;
}

export interface DeleteAgentAgentsAgentIdDeleteRequest {
    agentId: string;
}

export interface DeleteCollectionCollectionsCollectionIdDeleteRequest {
    collectionId: string;
}

export interface DeleteItemItemsItemIdDeleteRequest {
    itemId: string;
}

export interface DeleteVerificationJobVerificationJobsVerificationJobIdDeleteRequest {
    verificationJobId: string;
}

export interface GenerateDownloadUrlItemsDownloadurlsPostRequest {
    requestBody: Array<string | null>;
}

export interface GenerateUploadUrlsItemsUploadurlsPostRequest {
    generateUploadUrlsRequest: GenerateUploadUrlsRequest;
}

export interface GetAgentAgentsAgentIdGetRequest {
    agentId: string;
}

export interface GetAgentsUsedInJobAgentsJobVerificationJobIdGetRequest {
    verificationJobId: string;
}

export interface GetCollectionCollectionsCollectionIdGetRequest {
    collectionId: string;
}

export interface GetCollectionFilePresignedUrlsCollectionsCollectionIdFilesPresignedUrlsGetRequest {
    collectionId: string;
}

export interface GetCoordinatesCollectionsCoordinatesPostRequest {
    coordinatesRequest: CoordinatesRequest;
}

export interface GetItemItemsItemIdGetRequest {
    itemId: string;
}

export interface GetModelIdHistoryLlmConfigHistoryModelIdGetRequest {
    limit?: number;
}

export interface GetSystemPromptHistoryLlmConfigHistorySystemPromptGetRequest {
    limit?: number;
}

export interface GetVerificationJobFilesUrlVerificationJobsVerificationJobIdFilesPresignedUrlsGetRequest {
    verificationJobId: string;
}

export interface GetVerificationJobLogsVerificationJobsLogsVerificationJobIdGetRequest {
    verificationJobId: string;
    limit?: number;
    lastEvaluatedKey?: string | null;
    searchString?: string | null;
    logLevel?: string | null;
}

export interface GetVerificationJobVerificationJobsVerificationJobIdGetRequest {
    verificationJobId: string;
}

export interface ItemDescriptionFilterPromptTestItemsTestPromptPostRequest {
    testDescriptionFilterPromptRequest: TestDescriptionFilterPromptRequest;
}

export interface ItemLabelFilteringRuleTestItemsTestLabelPostRequest {
    testLabelFilteringRuleRequest: TestLabelFilteringRuleRequest;
}

export interface ListCollectionsCollectionsGetRequest {
    status?: AssessmentStatus | null;
}

export interface ListVerificationJobsVerificationJobsGetRequest {
    status?: AssessmentStatus | null;
    collectionId?: string | null;
}

export interface PresignCollectionFileUploadCollectionsCollectionIdPresignUploadPostRequest {
    collectionId: string;
    contentType: string;
    filename: string;
}

export interface StartVerificationJobExecutionVerificationJobsVerificationJobIdStartPostRequest {
    verificationJobId: string;
}

export interface UpdateAgentAgentsAgentIdPutRequest {
    agentId: string;
    updateAgentRequest: UpdateAgentRequest;
}

export interface UpdateCollectionCollectionsCollectionIdPutRequest {
    collectionId: string;
    updateCollectionRequest: UpdateCollectionRequest;
}

export interface UpdateItemItemsItemIdPutRequest {
    itemId: string;
    updateItemRequest: UpdateItemRequest;
}

export interface UpdateJobSecondPassLlmConfigSecondPassPostRequest {
    verificationJobSecondPassRequest: VerificationJobSecondPassRequest;
}

export interface UpdateModelIdLlmConfigModelIdPostRequest {
    modelIdRequest: ModelIdRequest;
}

export interface UpdateSystemPromptLlmConfigSystemPromptPostRequest {
    systemPromptRequest: SystemPromptRequest;
}

export interface UpdateVerificationJobVerificationJobsVerificationJobIdPutRequest {
    verificationJobId: string;
    updateVerificationJobRequest: UpdateVerificationJobRequest;
}

/**
 * 
 */
export class CVImageVerificationApi extends runtime.BaseAPI {

    /**
     * Registers a file with a collection after the file has been successfully uploaded (typically using a pre-signed URL obtained from another endpoint).  This updates the collection record to include metadata about the uploaded file.  Args:     collection_id (str): The ID of the collection to associate the file with.     file_data (AddFileRequest): The request body containing details about the uploaded file                                 (e.g., S3 key, filename, content type).  Returns:     AddFileResponse: A response object confirming the file association, potentially                      including the updated file list or file details.
     * Add File To Collection
     */
    async addFileToCollectionCollectionsCollectionIdFilesPostRaw(requestParameters: AddFileToCollectionCollectionsCollectionIdFilesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddFileResponse>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling addFileToCollectionCollectionsCollectionIdFilesPost().'
            );
        }

        if (requestParameters['addFileRequest'] == null) {
            throw new runtime.RequiredError(
                'addFileRequest',
                'Required parameter "addFileRequest" was null or undefined when calling addFileToCollectionCollectionsCollectionIdFilesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/collections/{collection_id}/files`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddFileRequestToJSON(requestParameters['addFileRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddFileResponseFromJSON(jsonValue));
    }

    /**
     * Registers a file with a collection after the file has been successfully uploaded (typically using a pre-signed URL obtained from another endpoint).  This updates the collection record to include metadata about the uploaded file.  Args:     collection_id (str): The ID of the collection to associate the file with.     file_data (AddFileRequest): The request body containing details about the uploaded file                                 (e.g., S3 key, filename, content type).  Returns:     AddFileResponse: A response object confirming the file association, potentially                      including the updated file list or file details.
     * Add File To Collection
     */
    async addFileToCollectionCollectionsCollectionIdFilesPost(requestParameters: AddFileToCollectionCollectionsCollectionIdFilesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddFileResponse> {
        const response = await this.addFileToCollectionCollectionsCollectionIdFilesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provides address autocomplete suggestions based on a partial address query string.  Args:     query (str): The partial address text entered by the user for autocompletion.  Returns:     AddressAutocompleteResponse: A response object containing a list of suggested addresses.
     * Address Autocomplete
     */
    async addressAutocompleteCollectionsAddressAutocompleteGetRaw(requestParameters: AddressAutocompleteCollectionsAddressAutocompleteGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddressAutocompleteResponse>> {
        if (requestParameters['query'] == null) {
            throw new runtime.RequiredError(
                'query',
                'Required parameter "query" was null or undefined when calling addressAutocompleteCollectionsAddressAutocompleteGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/collections/address-autocomplete`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressAutocompleteResponseFromJSON(jsonValue));
    }

    /**
     * Provides address autocomplete suggestions based on a partial address query string.  Args:     query (str): The partial address text entered by the user for autocompletion.  Returns:     AddressAutocompleteResponse: A response object containing a list of suggested addresses.
     * Address Autocomplete
     */
    async addressAutocompleteCollectionsAddressAutocompleteGet(requestParameters: AddressAutocompleteCollectionsAddressAutocompleteGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddressAutocompleteResponse> {
        const response = await this.addressAutocompleteCollectionsAddressAutocompleteGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new Agent based on the provided request data.  Args:     agent_request (CreateAgentRequest): The request body containing the details for the new Agent.  Returns:     Agent: The newly created Agent object.
     * Create Agent
     */
    async createAgentAgentsPostRaw(requestParameters: CreateAgentAgentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Agent>> {
        if (requestParameters['createAgentRequest'] == null) {
            throw new runtime.RequiredError(
                'createAgentRequest',
                'Required parameter "createAgentRequest" was null or undefined when calling createAgentAgentsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/agents/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAgentRequestToJSON(requestParameters['createAgentRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentFromJSON(jsonValue));
    }

    /**
     * Creates a new Agent based on the provided request data.  Args:     agent_request (CreateAgentRequest): The request body containing the details for the new Agent.  Returns:     Agent: The newly created Agent object.
     * Create Agent
     */
    async createAgentAgentsPost(requestParameters: CreateAgentAgentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Agent> {
        const response = await this.createAgentAgentsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new collection based on the provided request data.  This includes associating Item instances based on the provided `item_ids`.  Args:     collection_request (CreateCollectionRequest): The request body containing the details                                                  for the new collection.  Returns:     CreateCollectionResponse: A response object containing the details of the newly created collection.
     * Create Collection
     */
    async createCollectionCollectionsPostRaw(requestParameters: CreateCollectionCollectionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateCollectionResponse>> {
        if (requestParameters['createCollectionRequest'] == null) {
            throw new runtime.RequiredError(
                'createCollectionRequest',
                'Required parameter "createCollectionRequest" was null or undefined when calling createCollectionCollectionsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/collections/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCollectionRequestToJSON(requestParameters['createCollectionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateCollectionResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new collection based on the provided request data.  This includes associating Item instances based on the provided `item_ids`.  Args:     collection_request (CreateCollectionRequest): The request body containing the details                                                  for the new collection.  Returns:     CreateCollectionResponse: A response object containing the details of the newly created collection.
     * Create Collection
     */
    async createCollectionCollectionsPost(requestParameters: CreateCollectionCollectionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateCollectionResponse> {
        const response = await this.createCollectionCollectionsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new Item based on the provided request data.  Args:     item_request (CreateItemRequest): The request body containing the details for the new Item.  Returns:     Item: The newly created Item object.
     * Create Item
     */
    async createItemItemsPostRaw(requestParameters: CreateItemItemsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Item>> {
        if (requestParameters['createItemRequest'] == null) {
            throw new runtime.RequiredError(
                'createItemRequest',
                'Required parameter "createItemRequest" was null or undefined when calling createItemItemsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/items/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateItemRequestToJSON(requestParameters['createItemRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemFromJSON(jsonValue));
    }

    /**
     * Creates a new Item based on the provided request data.  Args:     item_request (CreateItemRequest): The request body containing the details for the new Item.  Returns:     Item: The newly created Item object.
     * Create Item
     */
    async createItemItemsPost(requestParameters: CreateItemItemsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Item> {
        const response = await this.createItemItemsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new verification job based on the provided request data.  This process involves deriving item instances from the specified collection and initiating the background processing workflow for the job.  Args:     job_request (CreateVerificationJobRequest): The request body containing the details                                                 for the new verification job.  Returns:     CreateVerificationJobResponse: The response containing the details of the                                    newly created verification job.
     * Create Verification Job
     */
    async createVerificationJobVerificationJobsPostRaw(requestParameters: CreateVerificationJobVerificationJobsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateVerificationJobResponse>> {
        if (requestParameters['createVerificationJobRequest'] == null) {
            throw new runtime.RequiredError(
                'createVerificationJobRequest',
                'Required parameter "createVerificationJobRequest" was null or undefined when calling createVerificationJobVerificationJobsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/verification-jobs/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateVerificationJobRequestToJSON(requestParameters['createVerificationJobRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateVerificationJobResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new verification job based on the provided request data.  This process involves deriving item instances from the specified collection and initiating the background processing workflow for the job.  Args:     job_request (CreateVerificationJobRequest): The request body containing the details                                                 for the new verification job.  Returns:     CreateVerificationJobResponse: The response containing the details of the                                    newly created verification job.
     * Create Verification Job
     */
    async createVerificationJobVerificationJobsPost(requestParameters: CreateVerificationJobVerificationJobsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateVerificationJobResponse> {
        const response = await this.createVerificationJobVerificationJobsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes an Agent identified by its ID.  Args:     agent_id (str): The unique identifier of the Agent to delete.  Returns:     None: Returns None with a 204 No Content status code upon successful deletion.
     * Delete Agent
     */
    async deleteAgentAgentsAgentIdDeleteRaw(requestParameters: DeleteAgentAgentsAgentIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['agentId'] == null) {
            throw new runtime.RequiredError(
                'agentId',
                'Required parameter "agentId" was null or undefined when calling deleteAgentAgentsAgentIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/agents/{agent_id}`.replace(`{${"agent_id"}}`, encodeURIComponent(String(requestParameters['agentId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes an Agent identified by its ID.  Args:     agent_id (str): The unique identifier of the Agent to delete.  Returns:     None: Returns None with a 204 No Content status code upon successful deletion.
     * Delete Agent
     */
    async deleteAgentAgentsAgentIdDelete(requestParameters: DeleteAgentAgentsAgentIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAgentAgentsAgentIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a specific collection identified by its ID.  This process typically involves checks for associated verification jobs and cleanup of related resources, such as files stored in S3.  Args:     collection_id (str): The unique identifier of the collection to delete.  Returns:     None: Returns None with a 204 No Content status code upon successful deletion.
     * Delete Collection
     */
    async deleteCollectionCollectionsCollectionIdDeleteRaw(requestParameters: DeleteCollectionCollectionsCollectionIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling deleteCollectionCollectionsCollectionIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/collections/{collection_id}`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a specific collection identified by its ID.  This process typically involves checks for associated verification jobs and cleanup of related resources, such as files stored in S3.  Args:     collection_id (str): The unique identifier of the collection to delete.  Returns:     None: Returns None with a 204 No Content status code upon successful deletion.
     * Delete Collection
     */
    async deleteCollectionCollectionsCollectionIdDelete(requestParameters: DeleteCollectionCollectionsCollectionIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCollectionCollectionsCollectionIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes an Item identified by its ID.  Args:     item_id (str): The unique identifier of the Item to delete.  Returns:     None: Returns None with a 204 No Content status code upon successful deletion.
     * Delete Item
     */
    async deleteItemItemsItemIdDeleteRaw(requestParameters: DeleteItemItemsItemIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling deleteItemItemsItemIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/items/{item_id}`.replace(`{${"item_id"}}`, encodeURIComponent(String(requestParameters['itemId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes an Item identified by its ID.  Args:     item_id (str): The unique identifier of the Item to delete.  Returns:     None: Returns None with a 204 No Content status code upon successful deletion.
     * Delete Item
     */
    async deleteItemItemsItemIdDelete(requestParameters: DeleteItemItemsItemIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteItemItemsItemIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a specific verification job identified by its ID.  This operation permanently removes the verification job and potentially associated data.  Args:     verification_job_id (str): The unique identifier of the verification job to delete.  Returns:     None: Returns None with a 204 No Content status code upon successful deletion.
     * Delete Verification Job
     */
    async deleteVerificationJobVerificationJobsVerificationJobIdDeleteRaw(requestParameters: DeleteVerificationJobVerificationJobsVerificationJobIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['verificationJobId'] == null) {
            throw new runtime.RequiredError(
                'verificationJobId',
                'Required parameter "verificationJobId" was null or undefined when calling deleteVerificationJobVerificationJobsVerificationJobIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/verification-jobs/{verification_job_id}`.replace(`{${"verification_job_id"}}`, encodeURIComponent(String(requestParameters['verificationJobId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a specific verification job identified by its ID.  This operation permanently removes the verification job and potentially associated data.  Args:     verification_job_id (str): The unique identifier of the verification job to delete.  Returns:     None: Returns None with a 204 No Content status code upon successful deletion.
     * Delete Verification Job
     */
    async deleteVerificationJobVerificationJobsVerificationJobIdDelete(requestParameters: DeleteVerificationJobVerificationJobsVerificationJobIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteVerificationJobVerificationJobsVerificationJobIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Generates pre-signed S3 URLs for downloading files based on their S3 keys.  Ensures keys are prefixed with \'temp-uploads/\' for security.  Args:     s3_keys (List[str]): A list of S3 keys for the files to download.  Raises:     HTTPException: If there\'s an error generating a URL (e.g., S3 client error).  Returns:     List[str]: A list of pre-signed URLs corresponding to the provided S3 keys.
     * Generate Download Url
     */
    async generateDownloadUrlItemsDownloadurlsPostRaw(requestParameters: GenerateDownloadUrlItemsDownloadurlsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string | null>>> {
        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling generateDownloadUrlItemsDownloadurlsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/items/downloadurls`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Generates pre-signed S3 URLs for downloading files based on their S3 keys.  Ensures keys are prefixed with \'temp-uploads/\' for security.  Args:     s3_keys (List[str]): A list of S3 keys for the files to download.  Raises:     HTTPException: If there\'s an error generating a URL (e.g., S3 client error).  Returns:     List[str]: A list of pre-signed URLs corresponding to the provided S3 keys.
     * Generate Download Url
     */
    async generateDownloadUrlItemsDownloadurlsPost(requestParameters: GenerateDownloadUrlItemsDownloadurlsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string | null>> {
        const response = await this.generateDownloadUrlItemsDownloadurlsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Generates pre-signed S3 URLs for uploading files associated with Items.  Args:     request (GenerateUploadUrlsRequest): The request body containing filenames and content types.  Returns:     GenerateUploadUrlsResponse: A response object containing the generated pre-signed URLs.
     * Generate Upload Urls
     */
    async generateUploadUrlsItemsUploadurlsPostRaw(requestParameters: GenerateUploadUrlsItemsUploadurlsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenerateUploadUrlsResponse>> {
        if (requestParameters['generateUploadUrlsRequest'] == null) {
            throw new runtime.RequiredError(
                'generateUploadUrlsRequest',
                'Required parameter "generateUploadUrlsRequest" was null or undefined when calling generateUploadUrlsItemsUploadurlsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/items/uploadurls`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GenerateUploadUrlsRequestToJSON(requestParameters['generateUploadUrlsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenerateUploadUrlsResponseFromJSON(jsonValue));
    }

    /**
     * Generates pre-signed S3 URLs for uploading files associated with Items.  Args:     request (GenerateUploadUrlsRequest): The request body containing filenames and content types.  Returns:     GenerateUploadUrlsResponse: A response object containing the generated pre-signed URLs.
     * Generate Upload Urls
     */
    async generateUploadUrlsItemsUploadurlsPost(requestParameters: GenerateUploadUrlsItemsUploadurlsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenerateUploadUrlsResponse> {
        const response = await this.generateUploadUrlsItemsUploadurlsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a specific Agent by its ID.  Args:     agent_id (str): The unique identifier of the Agent to retrieve.  Returns:     Agent: The Agent object corresponding to the given ID.
     * Get Agent
     */
    async getAgentAgentsAgentIdGetRaw(requestParameters: GetAgentAgentsAgentIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Agent>> {
        if (requestParameters['agentId'] == null) {
            throw new runtime.RequiredError(
                'agentId',
                'Required parameter "agentId" was null or undefined when calling getAgentAgentsAgentIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/agents/{agent_id}`.replace(`{${"agent_id"}}`, encodeURIComponent(String(requestParameters['agentId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentFromJSON(jsonValue));
    }

    /**
     * Retrieves a specific Agent by its ID.  Args:     agent_id (str): The unique identifier of the Agent to retrieve.  Returns:     Agent: The Agent object corresponding to the given ID.
     * Get Agent
     */
    async getAgentAgentsAgentIdGet(requestParameters: GetAgentAgentsAgentIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Agent> {
        const response = await this.getAgentAgentsAgentIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of all Agents.  Returns:     AgentListResponse: A response object containing a list of Agents.
     * Get Agents
     */
    async getAgentsAgentsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentListResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/agents/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentListResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a list of all Agents.  Returns:     AgentListResponse: A response object containing a list of Agents.
     * Get Agents
     */
    async getAgentsAgentsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentListResponse> {
        const response = await this.getAgentsAgentsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of all agents used in a specific verification job.  Args:     verification_job_id (str): The unique identifier of the verification job.  Returns:     AgentListResponse: A response object containing a list of agents used in the job.
     * Get Agents Used In Job
     */
    async getAgentsUsedInJobAgentsJobVerificationJobIdGetRaw(requestParameters: GetAgentsUsedInJobAgentsJobVerificationJobIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentListResponse>> {
        if (requestParameters['verificationJobId'] == null) {
            throw new runtime.RequiredError(
                'verificationJobId',
                'Required parameter "verificationJobId" was null or undefined when calling getAgentsUsedInJobAgentsJobVerificationJobIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/agents/job/{verification_job_id}`.replace(`{${"verification_job_id"}}`, encodeURIComponent(String(requestParameters['verificationJobId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentListResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a list of all agents used in a specific verification job.  Args:     verification_job_id (str): The unique identifier of the verification job.  Returns:     AgentListResponse: A response object containing a list of agents used in the job.
     * Get Agents Used In Job
     */
    async getAgentsUsedInJobAgentsJobVerificationJobIdGet(requestParameters: GetAgentsUsedInJobAgentsJobVerificationJobIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentListResponse> {
        const response = await this.getAgentsUsedInJobAgentsJobVerificationJobIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the details of a specific collection identified by its ID.  Args:     collection_id (str): The unique identifier of the collection to retrieve.  Returns:     CollectionResponse: A response object containing the details of the requested collection.
     * Get Collection
     */
    async getCollectionCollectionsCollectionIdGetRaw(requestParameters: GetCollectionCollectionsCollectionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionResponse>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling getCollectionCollectionsCollectionIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/collections/{collection_id}`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves the details of a specific collection identified by its ID.  Args:     collection_id (str): The unique identifier of the collection to retrieve.  Returns:     CollectionResponse: A response object containing the details of the requested collection.
     * Get Collection
     */
    async getCollectionCollectionsCollectionIdGet(requestParameters: GetCollectionCollectionsCollectionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionResponse> {
        const response = await this.getCollectionCollectionsCollectionIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Generates and retrieves pre-signed GET URLs for all files associated with a specific collection.  These URLs allow temporary, secure access to download the files directly from storage.  Args:     collection_id (str): The unique identifier of the collection whose file URLs are needed.  Returns:     CollectionFilePresignedUrlsResponse: A response object containing a list of pre-signed URLs.
     * Get Collection File Presigned Urls
     */
    async getCollectionFilePresignedUrlsCollectionsCollectionIdFilesPresignedUrlsGetRaw(requestParameters: GetCollectionFilePresignedUrlsCollectionsCollectionIdFilesPresignedUrlsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionFilePresignedUrlsResponse>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling getCollectionFilePresignedUrlsCollectionsCollectionIdFilesPresignedUrlsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/collections/{collection_id}/files/presigned-urls`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionFilePresignedUrlsResponseFromJSON(jsonValue));
    }

    /**
     * Generates and retrieves pre-signed GET URLs for all files associated with a specific collection.  These URLs allow temporary, secure access to download the files directly from storage.  Args:     collection_id (str): The unique identifier of the collection whose file URLs are needed.  Returns:     CollectionFilePresignedUrlsResponse: A response object containing a list of pre-signed URLs.
     * Get Collection File Presigned Urls
     */
    async getCollectionFilePresignedUrlsCollectionsCollectionIdFilesPresignedUrlsGet(requestParameters: GetCollectionFilePresignedUrlsCollectionsCollectionIdFilesPresignedUrlsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionFilePresignedUrlsResponse> {
        const response = await this.getCollectionFilePresignedUrlsCollectionsCollectionIdFilesPresignedUrlsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the geographical coordinates (latitude and longitude) for a given address.  Accepts the address details within the request body.  Args:     request (CoordinatesRequest): The request body containing the address information.  Returns:     CoordinatesResponse: A response object containing the latitude and longitude.
     * Get Coordinates
     */
    async getCoordinatesCollectionsCoordinatesPostRaw(requestParameters: GetCoordinatesCollectionsCoordinatesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoordinatesResponse>> {
        if (requestParameters['coordinatesRequest'] == null) {
            throw new runtime.RequiredError(
                'coordinatesRequest',
                'Required parameter "coordinatesRequest" was null or undefined when calling getCoordinatesCollectionsCoordinatesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/collections/coordinates`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoordinatesRequestToJSON(requestParameters['coordinatesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoordinatesResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves the geographical coordinates (latitude and longitude) for a given address.  Accepts the address details within the request body.  Args:     request (CoordinatesRequest): The request body containing the address information.  Returns:     CoordinatesResponse: A response object containing the latitude and longitude.
     * Get Coordinates
     */
    async getCoordinatesCollectionsCoordinatesPost(requestParameters: GetCoordinatesCollectionsCoordinatesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoordinatesResponse> {
        const response = await this.getCoordinatesCollectionsCoordinatesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the current active model ID.
     * Get Current Model Id
     */
    async getCurrentModelIdLlmConfigModelIdGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/llm-config/model-id`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get the current active model ID.
     * Get Current Model Id
     */
    async getCurrentModelIdLlmConfigModelIdGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getCurrentModelIdLlmConfigModelIdGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get the current active system prompt.
     * Get Current System Prompt
     */
    async getCurrentSystemPromptLlmConfigSystemPromptGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/llm-config/system-prompt`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get the current active system prompt.
     * Get Current System Prompt
     */
    async getCurrentSystemPromptLlmConfigSystemPromptGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getCurrentSystemPromptLlmConfigSystemPromptGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a specific Item by its ID.  Args:     item_id (str): The unique identifier of the Item to retrieve.  Returns:     Item: The Item object corresponding to the given ID.
     * Get Item
     */
    async getItemItemsItemIdGetRaw(requestParameters: GetItemItemsItemIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Item>> {
        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling getItemItemsItemIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/items/{item_id}`.replace(`{${"item_id"}}`, encodeURIComponent(String(requestParameters['itemId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemFromJSON(jsonValue));
    }

    /**
     * Retrieves a specific Item by its ID.  Args:     item_id (str): The unique identifier of the Item to retrieve.  Returns:     Item: The Item object corresponding to the given ID.
     * Get Item
     */
    async getItemItemsItemIdGet(requestParameters: GetItemItemsItemIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Item> {
        const response = await this.getItemItemsItemIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of all Items.  Returns:     ItemListResponse: A response object containing a list of Items.
     * Get Items
     */
    async getItemsItemsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemListResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/items/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemListResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a list of all Items.  Returns:     ItemListResponse: A response object containing a list of Items.
     * Get Items
     */
    async getItemsItemsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemListResponse> {
        const response = await this.getItemsItemsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns a boolean indicating whether a second pass verification should be performed on images. A second verification pass executed on images helps reduce false positives in image verification, but makes verification jobs cost more and take longer to complete.
     * Get Job Second Pass
     */
    async getJobSecondPassLlmConfigSecondPassGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/llm-config/second-pass`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Returns a boolean indicating whether a second pass verification should be performed on images. A second verification pass executed on images helps reduce false positives in image verification, but makes verification jobs cost more and take longer to complete.
     * Get Job Second Pass
     */
    async getJobSecondPassLlmConfigSecondPassGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.getJobSecondPassLlmConfigSecondPassGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get the history of model ID configurations.
     * Get Model Id History
     */
    async getModelIdHistoryLlmConfigHistoryModelIdGetRaw(requestParameters: GetModelIdHistoryLlmConfigHistoryModelIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ConfigResponse>>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/llm-config/history/model-id`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ConfigResponseFromJSON));
    }

    /**
     * Get the history of model ID configurations.
     * Get Model Id History
     */
    async getModelIdHistoryLlmConfigHistoryModelIdGet(requestParameters: GetModelIdHistoryLlmConfigHistoryModelIdGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ConfigResponse>> {
        const response = await this.getModelIdHistoryLlmConfigHistoryModelIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the history of system prompt configurations.
     * Get System Prompt History
     */
    async getSystemPromptHistoryLlmConfigHistorySystemPromptGetRaw(requestParameters: GetSystemPromptHistoryLlmConfigHistorySystemPromptGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ConfigResponse>>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/llm-config/history/system-prompt`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ConfigResponseFromJSON));
    }

    /**
     * Get the history of system prompt configurations.
     * Get System Prompt History
     */
    async getSystemPromptHistoryLlmConfigHistorySystemPromptGet(requestParameters: GetSystemPromptHistoryLlmConfigHistorySystemPromptGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ConfigResponse>> {
        const response = await this.getSystemPromptHistoryLlmConfigHistorySystemPromptGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Generates and returns pre-signed GET URLs for accessing files associated with a specific verification job.  These URLs provide temporary, secure access to download the files directly from storage (e.g., S3).  Args:     verification_job_id (str): The unique identifier of the verification job whose files are needed.  Returns:     VerificationJobFilePresignedUrlsResponse: A response object containing a list of                                               pre-signed URLs for the job\'s files.
     * Get Verification Job Files Url
     */
    async getVerificationJobFilesUrlVerificationJobsVerificationJobIdFilesPresignedUrlsGetRaw(requestParameters: GetVerificationJobFilesUrlVerificationJobsVerificationJobIdFilesPresignedUrlsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VerificationJobFilePresignedUrlsResponse>> {
        if (requestParameters['verificationJobId'] == null) {
            throw new runtime.RequiredError(
                'verificationJobId',
                'Required parameter "verificationJobId" was null or undefined when calling getVerificationJobFilesUrlVerificationJobsVerificationJobIdFilesPresignedUrlsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/verification-jobs/{verification_job_id}/files/presigned-urls`.replace(`{${"verification_job_id"}}`, encodeURIComponent(String(requestParameters['verificationJobId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VerificationJobFilePresignedUrlsResponseFromJSON(jsonValue));
    }

    /**
     * Generates and returns pre-signed GET URLs for accessing files associated with a specific verification job.  These URLs provide temporary, secure access to download the files directly from storage (e.g., S3).  Args:     verification_job_id (str): The unique identifier of the verification job whose files are needed.  Returns:     VerificationJobFilePresignedUrlsResponse: A response object containing a list of                                               pre-signed URLs for the job\'s files.
     * Get Verification Job Files Url
     */
    async getVerificationJobFilesUrlVerificationJobsVerificationJobIdFilesPresignedUrlsGet(requestParameters: GetVerificationJobFilesUrlVerificationJobsVerificationJobIdFilesPresignedUrlsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VerificationJobFilePresignedUrlsResponse> {
        const response = await this.getVerificationJobFilesUrlVerificationJobsVerificationJobIdFilesPresignedUrlsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves log entries for a specific verification job, supporting pagination and filtering.  Allows fetching logs based on job ID, with options to limit the number of results, paginate using a `last_evaluated_key`, filter by a search string within log messages, and filter by log level. This typically queries a secondary index for efficiency.  Args:     verification_job_id (str): The ID of the verification job to retrieve logs for.     limit (int): Maximum number of log entries to return per request.     last_evaluated_key (Optional[str]): A token for pagination, representing the last item                                          from the previous request.     search_string (Optional[str]): A string to filter log messages (case-sensitive).     log_level (Optional[str]): Filter logs by their severity level (e.g., INFO, ERROR).  Returns:     VerificationJobLogListResponse: A response object containing the list of log entries                                     and potentially a `last_evaluated_key` for pagination.
     * Get Verification Job Logs
     */
    async getVerificationJobLogsVerificationJobsLogsVerificationJobIdGetRaw(requestParameters: GetVerificationJobLogsVerificationJobsLogsVerificationJobIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VerificationJobLogListResponse>> {
        if (requestParameters['verificationJobId'] == null) {
            throw new runtime.RequiredError(
                'verificationJobId',
                'Required parameter "verificationJobId" was null or undefined when calling getVerificationJobLogsVerificationJobsLogsVerificationJobIdGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['lastEvaluatedKey'] != null) {
            queryParameters['last_evaluated_key'] = requestParameters['lastEvaluatedKey'];
        }

        if (requestParameters['searchString'] != null) {
            queryParameters['search_string'] = requestParameters['searchString'];
        }

        if (requestParameters['logLevel'] != null) {
            queryParameters['log_level'] = requestParameters['logLevel'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/verification-jobs/logs/{verification_job_id}`.replace(`{${"verification_job_id"}}`, encodeURIComponent(String(requestParameters['verificationJobId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VerificationJobLogListResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves log entries for a specific verification job, supporting pagination and filtering.  Allows fetching logs based on job ID, with options to limit the number of results, paginate using a `last_evaluated_key`, filter by a search string within log messages, and filter by log level. This typically queries a secondary index for efficiency.  Args:     verification_job_id (str): The ID of the verification job to retrieve logs for.     limit (int): Maximum number of log entries to return per request.     last_evaluated_key (Optional[str]): A token for pagination, representing the last item                                          from the previous request.     search_string (Optional[str]): A string to filter log messages (case-sensitive).     log_level (Optional[str]): Filter logs by their severity level (e.g., INFO, ERROR).  Returns:     VerificationJobLogListResponse: A response object containing the list of log entries                                     and potentially a `last_evaluated_key` for pagination.
     * Get Verification Job Logs
     */
    async getVerificationJobLogsVerificationJobsLogsVerificationJobIdGet(requestParameters: GetVerificationJobLogsVerificationJobsLogsVerificationJobIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VerificationJobLogListResponse> {
        const response = await this.getVerificationJobLogsVerificationJobsLogsVerificationJobIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves details for a specific verification job identified by its ID.  Includes the associated collection name in the response.  Args:     verification_job_id (str): The unique identifier of the verification job to retrieve.  Returns:     VerificationJobResponse: The details of the requested verification job.
     * Get Verification Job
     */
    async getVerificationJobVerificationJobsVerificationJobIdGetRaw(requestParameters: GetVerificationJobVerificationJobsVerificationJobIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VerificationJobResponse>> {
        if (requestParameters['verificationJobId'] == null) {
            throw new runtime.RequiredError(
                'verificationJobId',
                'Required parameter "verificationJobId" was null or undefined when calling getVerificationJobVerificationJobsVerificationJobIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/verification-jobs/{verification_job_id}`.replace(`{${"verification_job_id"}}`, encodeURIComponent(String(requestParameters['verificationJobId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VerificationJobResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves details for a specific verification job identified by its ID.  Includes the associated collection name in the response.  Args:     verification_job_id (str): The unique identifier of the verification job to retrieve.  Returns:     VerificationJobResponse: The details of the requested verification job.
     * Get Verification Job
     */
    async getVerificationJobVerificationJobsVerificationJobIdGet(requestParameters: GetVerificationJobVerificationJobsVerificationJobIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VerificationJobResponse> {
        const response = await this.getVerificationJobVerificationJobsVerificationJobIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Health check endpoint to verify the API is running.
     * Health Check
     */
    async healthCheckGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Health check endpoint to verify the API is running.
     * Health Check
     */
    async healthCheckGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.healthCheckGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Health check endpoint to verify the router is working.
     * Health Check
     */
    async healthCheckHealthGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/health/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HealthResponseFromJSON(jsonValue));
    }

    /**
     * Health check endpoint to verify the router is working.
     * Health Check
     */
    async healthCheckHealthGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthResponse> {
        const response = await this.healthCheckHealthGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Tests the Item description filtering prompt with the provided text and configuration.  Args:     request (TestDescriptionFilterPromptRequest): The request containing the text,                                                      prompt configuration, and LLM settings.  Returns:     TestDescriptionFilterPromptResponse: The response indicating whether the description                                             passes the filter based on the prompt test.
     * Item Description Filter Prompt Test
     */
    async itemDescriptionFilterPromptTestItemsTestPromptPostRaw(requestParameters: ItemDescriptionFilterPromptTestItemsTestPromptPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TestDescriptionFilterPromptResponse>> {
        if (requestParameters['testDescriptionFilterPromptRequest'] == null) {
            throw new runtime.RequiredError(
                'testDescriptionFilterPromptRequest',
                'Required parameter "testDescriptionFilterPromptRequest" was null or undefined when calling itemDescriptionFilterPromptTestItemsTestPromptPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/items/test/prompt`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TestDescriptionFilterPromptRequestToJSON(requestParameters['testDescriptionFilterPromptRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TestDescriptionFilterPromptResponseFromJSON(jsonValue));
    }

    /**
     * Tests the Item description filtering prompt with the provided text and configuration.  Args:     request (TestDescriptionFilterPromptRequest): The request containing the text,                                                      prompt configuration, and LLM settings.  Returns:     TestDescriptionFilterPromptResponse: The response indicating whether the description                                             passes the filter based on the prompt test.
     * Item Description Filter Prompt Test
     */
    async itemDescriptionFilterPromptTestItemsTestPromptPost(requestParameters: ItemDescriptionFilterPromptTestItemsTestPromptPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TestDescriptionFilterPromptResponse> {
        const response = await this.itemDescriptionFilterPromptTestItemsTestPromptPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Tests the Item label filtering rule with the provided text and configuration.  Args:     request (TestLabelFilteringRuleRequest): The request containing the text,                                                      prompt configuration, and LLM settings.  Returns:     TestLabelFilteringRuleResponse: The response indicating whether the description                                             passes the filter based on the label test.
     * Item Label Filtering Rule Test
     */
    async itemLabelFilteringRuleTestItemsTestLabelPostRaw(requestParameters: ItemLabelFilteringRuleTestItemsTestLabelPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TestLabelFilteringRuleResponse>> {
        if (requestParameters['testLabelFilteringRuleRequest'] == null) {
            throw new runtime.RequiredError(
                'testLabelFilteringRuleRequest',
                'Required parameter "testLabelFilteringRuleRequest" was null or undefined when calling itemLabelFilteringRuleTestItemsTestLabelPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/items/test/label`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TestLabelFilteringRuleRequestToJSON(requestParameters['testLabelFilteringRuleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TestLabelFilteringRuleResponseFromJSON(jsonValue));
    }

    /**
     * Tests the Item label filtering rule with the provided text and configuration.  Args:     request (TestLabelFilteringRuleRequest): The request containing the text,                                                      prompt configuration, and LLM settings.  Returns:     TestLabelFilteringRuleResponse: The response indicating whether the description                                             passes the filter based on the label test.
     * Item Label Filtering Rule Test
     */
    async itemLabelFilteringRuleTestItemsTestLabelPost(requestParameters: ItemLabelFilteringRuleTestItemsTestLabelPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TestLabelFilteringRuleResponse> {
        const response = await this.itemLabelFilteringRuleTestItemsTestLabelPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of collections, optionally filtered by their assessment status.  Args:     filter_status (Optional[AssessmentStatus]): Filter collections by status (e.g., PENDING, COMPLETED).  Returns:     CollectionsListResponse: A response object containing a list of collections matching the criteria.
     * List Collections
     */
    async listCollectionsCollectionsGetRaw(requestParameters: ListCollectionsCollectionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionsListResponse>> {
        const queryParameters: any = {};

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/collections/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionsListResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a list of collections, optionally filtered by their assessment status.  Args:     filter_status (Optional[AssessmentStatus]): Filter collections by status (e.g., PENDING, COMPLETED).  Returns:     CollectionsListResponse: A response object containing a list of collections matching the criteria.
     * List Collections
     */
    async listCollectionsCollectionsGet(requestParameters: ListCollectionsCollectionsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionsListResponse> {
        const response = await this.listCollectionsCollectionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of verification jobs, optionally filtered by status or collection ID.  Includes the associated collection name in the response DTOs.  Args:     filter_status (Optional[AssessmentStatus]): Filter jobs by their assessment status.     collection_id (Optional[str]): Filter jobs associated with a specific collection ID.  Returns:     List[VerificationJobDto]: A list of verification job data transfer objects matching the criteria.
     * List Verification Jobs
     */
    async listVerificationJobsVerificationJobsGetRaw(requestParameters: ListVerificationJobsVerificationJobsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<VerificationJobDto>>> {
        const queryParameters: any = {};

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['collectionId'] != null) {
            queryParameters['collection_id'] = requestParameters['collectionId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/verification-jobs/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VerificationJobDtoFromJSON));
    }

    /**
     * Retrieves a list of verification jobs, optionally filtered by status or collection ID.  Includes the associated collection name in the response DTOs.  Args:     filter_status (Optional[AssessmentStatus]): Filter jobs by their assessment status.     collection_id (Optional[str]): Filter jobs associated with a specific collection ID.  Returns:     List[VerificationJobDto]: A list of verification job data transfer objects matching the criteria.
     * List Verification Jobs
     */
    async listVerificationJobsVerificationJobsGet(requestParameters: ListVerificationJobsVerificationJobsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<VerificationJobDto>> {
        const response = await this.listVerificationJobsVerificationJobsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Generates a pre-signed URL that allows a client to directly upload a file to S3 in the context of a specific collection.  Args:     collection_id (str): The ID of the collection the file will be associated with.     content_type (str): The MIME type of the file to be uploaded (e.g., \'image/jpeg\').     filename (str): The intended name of the file once uploaded.  Returns:     PresignUploadResponse: A response object containing the pre-signed URL and the                            corresponding S3 key where the file should be uploaded.
     * Presign Collection File Upload
     */
    async presignCollectionFileUploadCollectionsCollectionIdPresignUploadPostRaw(requestParameters: PresignCollectionFileUploadCollectionsCollectionIdPresignUploadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PresignUploadResponse>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling presignCollectionFileUploadCollectionsCollectionIdPresignUploadPost().'
            );
        }

        if (requestParameters['contentType'] == null) {
            throw new runtime.RequiredError(
                'contentType',
                'Required parameter "contentType" was null or undefined when calling presignCollectionFileUploadCollectionsCollectionIdPresignUploadPost().'
            );
        }

        if (requestParameters['filename'] == null) {
            throw new runtime.RequiredError(
                'filename',
                'Required parameter "filename" was null or undefined when calling presignCollectionFileUploadCollectionsCollectionIdPresignUploadPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['contentType'] != null) {
            queryParameters['content_type'] = requestParameters['contentType'];
        }

        if (requestParameters['filename'] != null) {
            queryParameters['filename'] = requestParameters['filename'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/collections/{collection_id}/presign-upload`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PresignUploadResponseFromJSON(jsonValue));
    }

    /**
     * Generates a pre-signed URL that allows a client to directly upload a file to S3 in the context of a specific collection.  Args:     collection_id (str): The ID of the collection the file will be associated with.     content_type (str): The MIME type of the file to be uploaded (e.g., \'image/jpeg\').     filename (str): The intended name of the file once uploaded.  Returns:     PresignUploadResponse: A response object containing the pre-signed URL and the                            corresponding S3 key where the file should be uploaded.
     * Presign Collection File Upload
     */
    async presignCollectionFileUploadCollectionsCollectionIdPresignUploadPost(requestParameters: PresignCollectionFileUploadCollectionsCollectionIdPresignUploadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PresignUploadResponse> {
        const response = await this.presignCollectionFileUploadCollectionsCollectionIdPresignUploadPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Initiates or restarts the execution of a specific verification job.  This endpoint requeues the job for processing. It typically involves clearing any previous file check results before starting the execution anew.  Args:     verification_job_id (str): The unique identifier of the verification job to start.  Returns:     VerificationJobResponse: The updated details of the verification job after                              being queued for execution.
     * Start Verification Job Execution
     */
    async startVerificationJobExecutionVerificationJobsVerificationJobIdStartPostRaw(requestParameters: StartVerificationJobExecutionVerificationJobsVerificationJobIdStartPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VerificationJobResponse>> {
        if (requestParameters['verificationJobId'] == null) {
            throw new runtime.RequiredError(
                'verificationJobId',
                'Required parameter "verificationJobId" was null or undefined when calling startVerificationJobExecutionVerificationJobsVerificationJobIdStartPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/verification-jobs/{verification_job_id}/start`.replace(`{${"verification_job_id"}}`, encodeURIComponent(String(requestParameters['verificationJobId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VerificationJobResponseFromJSON(jsonValue));
    }

    /**
     * Initiates or restarts the execution of a specific verification job.  This endpoint requeues the job for processing. It typically involves clearing any previous file check results before starting the execution anew.  Args:     verification_job_id (str): The unique identifier of the verification job to start.  Returns:     VerificationJobResponse: The updated details of the verification job after                              being queued for execution.
     * Start Verification Job Execution
     */
    async startVerificationJobExecutionVerificationJobsVerificationJobIdStartPost(requestParameters: StartVerificationJobExecutionVerificationJobsVerificationJobIdStartPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VerificationJobResponse> {
        const response = await this.startVerificationJobExecutionVerificationJobsVerificationJobIdStartPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an existing Agent identified by its ID with the provided data.  Args:     agent_id (str): The unique identifier of the Agent to update.     agent_request (UpdateAgentRequest): The request body containing the updated Agent details.  Returns:     Agent: The updated Agent object.
     * Update Agent
     */
    async updateAgentAgentsAgentIdPutRaw(requestParameters: UpdateAgentAgentsAgentIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Agent>> {
        if (requestParameters['agentId'] == null) {
            throw new runtime.RequiredError(
                'agentId',
                'Required parameter "agentId" was null or undefined when calling updateAgentAgentsAgentIdPut().'
            );
        }

        if (requestParameters['updateAgentRequest'] == null) {
            throw new runtime.RequiredError(
                'updateAgentRequest',
                'Required parameter "updateAgentRequest" was null or undefined when calling updateAgentAgentsAgentIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/agents/{agent_id}`.replace(`{${"agent_id"}}`, encodeURIComponent(String(requestParameters['agentId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAgentRequestToJSON(requestParameters['updateAgentRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentFromJSON(jsonValue));
    }

    /**
     * Updates an existing Agent identified by its ID with the provided data.  Args:     agent_id (str): The unique identifier of the Agent to update.     agent_request (UpdateAgentRequest): The request body containing the updated Agent details.  Returns:     Agent: The updated Agent object.
     * Update Agent
     */
    async updateAgentAgentsAgentIdPut(requestParameters: UpdateAgentAgentsAgentIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Agent> {
        const response = await this.updateAgentAgentsAgentIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an existing collection identified by its ID with the provided data.  Note: This endpoint typically updates top-level collection fields. Updating associated       Item instances or files might require separate operations or specific handling within the implementation.  Args:     collection_id (str): The unique identifier of the collection to update.     collection_request (UpdateCollectionRequest): The request body containing the updated                                                  collection data.  Returns:     UpdateCollectionResponse: A response object containing the updated details of the collection.
     * Update Collection
     */
    async updateCollectionCollectionsCollectionIdPutRaw(requestParameters: UpdateCollectionCollectionsCollectionIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateCollectionResponse>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling updateCollectionCollectionsCollectionIdPut().'
            );
        }

        if (requestParameters['updateCollectionRequest'] == null) {
            throw new runtime.RequiredError(
                'updateCollectionRequest',
                'Required parameter "updateCollectionRequest" was null or undefined when calling updateCollectionCollectionsCollectionIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/collections/{collection_id}`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateCollectionRequestToJSON(requestParameters['updateCollectionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateCollectionResponseFromJSON(jsonValue));
    }

    /**
     * Updates an existing collection identified by its ID with the provided data.  Note: This endpoint typically updates top-level collection fields. Updating associated       Item instances or files might require separate operations or specific handling within the implementation.  Args:     collection_id (str): The unique identifier of the collection to update.     collection_request (UpdateCollectionRequest): The request body containing the updated                                                  collection data.  Returns:     UpdateCollectionResponse: A response object containing the updated details of the collection.
     * Update Collection
     */
    async updateCollectionCollectionsCollectionIdPut(requestParameters: UpdateCollectionCollectionsCollectionIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateCollectionResponse> {
        const response = await this.updateCollectionCollectionsCollectionIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an existing Item identified by its ID with the provided data.  Args:     item_id (str): The unique identifier of the Item to update.     item_request (UpdateItemRequest): The request body containing the updated Item details.  Returns:     Item: The updated Item object.
     * Update Item
     */
    async updateItemItemsItemIdPutRaw(requestParameters: UpdateItemItemsItemIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Item>> {
        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling updateItemItemsItemIdPut().'
            );
        }

        if (requestParameters['updateItemRequest'] == null) {
            throw new runtime.RequiredError(
                'updateItemRequest',
                'Required parameter "updateItemRequest" was null or undefined when calling updateItemItemsItemIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/items/{item_id}`.replace(`{${"item_id"}}`, encodeURIComponent(String(requestParameters['itemId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateItemRequestToJSON(requestParameters['updateItemRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemFromJSON(jsonValue));
    }

    /**
     * Updates an existing Item identified by its ID with the provided data.  Args:     item_id (str): The unique identifier of the Item to update.     item_request (UpdateItemRequest): The request body containing the updated Item details.  Returns:     Item: The updated Item object.
     * Update Item
     */
    async updateItemItemsItemIdPut(requestParameters: UpdateItemItemsItemIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Item> {
        const response = await this.updateItemItemsItemIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the second pass configuration.
     * Update Job Second Pass
     */
    async updateJobSecondPassLlmConfigSecondPassPostRaw(requestParameters: UpdateJobSecondPassLlmConfigSecondPassPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConfigResponse>> {
        if (requestParameters['verificationJobSecondPassRequest'] == null) {
            throw new runtime.RequiredError(
                'verificationJobSecondPassRequest',
                'Required parameter "verificationJobSecondPassRequest" was null or undefined when calling updateJobSecondPassLlmConfigSecondPassPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/llm-config/second-pass`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VerificationJobSecondPassRequestToJSON(requestParameters['verificationJobSecondPassRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConfigResponseFromJSON(jsonValue));
    }

    /**
     * Update the second pass configuration.
     * Update Job Second Pass
     */
    async updateJobSecondPassLlmConfigSecondPassPost(requestParameters: UpdateJobSecondPassLlmConfigSecondPassPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConfigResponse> {
        const response = await this.updateJobSecondPassLlmConfigSecondPassPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the model ID configuration.
     * Update Model Id
     */
    async updateModelIdLlmConfigModelIdPostRaw(requestParameters: UpdateModelIdLlmConfigModelIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConfigResponse>> {
        if (requestParameters['modelIdRequest'] == null) {
            throw new runtime.RequiredError(
                'modelIdRequest',
                'Required parameter "modelIdRequest" was null or undefined when calling updateModelIdLlmConfigModelIdPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/llm-config/model-id`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelIdRequestToJSON(requestParameters['modelIdRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConfigResponseFromJSON(jsonValue));
    }

    /**
     * Update the model ID configuration.
     * Update Model Id
     */
    async updateModelIdLlmConfigModelIdPost(requestParameters: UpdateModelIdLlmConfigModelIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConfigResponse> {
        const response = await this.updateModelIdLlmConfigModelIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the system prompt configuration.
     * Update System Prompt
     */
    async updateSystemPromptLlmConfigSystemPromptPostRaw(requestParameters: UpdateSystemPromptLlmConfigSystemPromptPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConfigResponse>> {
        if (requestParameters['systemPromptRequest'] == null) {
            throw new runtime.RequiredError(
                'systemPromptRequest',
                'Required parameter "systemPromptRequest" was null or undefined when calling updateSystemPromptLlmConfigSystemPromptPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/llm-config/system-prompt`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemPromptRequestToJSON(requestParameters['systemPromptRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConfigResponseFromJSON(jsonValue));
    }

    /**
     * Update the system prompt configuration.
     * Update System Prompt
     */
    async updateSystemPromptLlmConfigSystemPromptPost(requestParameters: UpdateSystemPromptLlmConfigSystemPromptPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConfigResponse> {
        const response = await this.updateSystemPromptLlmConfigSystemPromptPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an existing verification job identified by its ID with the provided data.  Allows modification of certain attributes of the verification job.  Args:     verification_job_id (str): The unique identifier of the verification job to update.     job_request (UpdateVerificationJobRequest): The request body containing the updated                                                 verification job data.  Returns:     UpdateVerificationJobResponse: The response containing the updated details of the                                    verification job.
     * Update Verification Job
     */
    async updateVerificationJobVerificationJobsVerificationJobIdPutRaw(requestParameters: UpdateVerificationJobVerificationJobsVerificationJobIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateVerificationJobResponse>> {
        if (requestParameters['verificationJobId'] == null) {
            throw new runtime.RequiredError(
                'verificationJobId',
                'Required parameter "verificationJobId" was null or undefined when calling updateVerificationJobVerificationJobsVerificationJobIdPut().'
            );
        }

        if (requestParameters['updateVerificationJobRequest'] == null) {
            throw new runtime.RequiredError(
                'updateVerificationJobRequest',
                'Required parameter "updateVerificationJobRequest" was null or undefined when calling updateVerificationJobVerificationJobsVerificationJobIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/verification-jobs/{verification_job_id}`.replace(`{${"verification_job_id"}}`, encodeURIComponent(String(requestParameters['verificationJobId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateVerificationJobRequestToJSON(requestParameters['updateVerificationJobRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateVerificationJobResponseFromJSON(jsonValue));
    }

    /**
     * Updates an existing verification job identified by its ID with the provided data.  Allows modification of certain attributes of the verification job.  Args:     verification_job_id (str): The unique identifier of the verification job to update.     job_request (UpdateVerificationJobRequest): The request body containing the updated                                                 verification job data.  Returns:     UpdateVerificationJobResponse: The response containing the updated details of the                                    verification job.
     * Update Verification Job
     */
    async updateVerificationJobVerificationJobsVerificationJobIdPut(requestParameters: UpdateVerificationJobVerificationJobsVerificationJobIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateVerificationJobResponse> {
        const response = await this.updateVerificationJobVerificationJobsVerificationJobIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
