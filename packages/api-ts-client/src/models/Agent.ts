/* tslint:disable */
/* eslint-disable */
/**
 * Computer Vision Image Verification API
 * FastAPI backend for the Computer Vision Image Verification sample.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AgentTypes } from './AgentTypes';
import {
    AgentTypesFromJSON,
    AgentTypesFromJSONTyped,
    AgentTypesToJSON,
    AgentTypesToJSONTyped,
} from './AgentTypes';

/**
 * Agent class for representing an agent that assists with item description modification.
 * This model defines the structure for agents that can be of different types such as 
 * REST API agents or knowledge base agents. Each agent has a unique identifier, 
 * metadata about creation and updates, descriptive information, and type-specific
 * configuration parameters.
 * Attributes:
 *     id (str): Unique identifier for the agent.
 *     created_at (int): Unix timestamp indicating when the agent was created.
 *     updated_at (int): Unix timestamp indicating when the agent was last updated.
 *     name (str): Name of the agent.
 *     description (Optional[str]): Optional description of the agent.
 *     prompt (str): Prompt template or instructions for the agent.
 *     type (AgentTypes): Type of the agent (e.g., REST API, knowledge base).
 *     api_endpoint (Optional[str]): Endpoint URL for REST API agents.
 *     knowledge_base_id (Optional[str]): ID of the knowledge base for KB agents.
 * @export
 * @interface Agent
 */
export interface Agent {
    /**
     * Unique identifier for the agent
     * @type {string}
     * @memberof Agent
     */
    id: string;
    /**
     * Timestamp when the agent was created
     * @type {number}
     * @memberof Agent
     */
    createdAt: number;
    /**
     * Timestamp when the agent was last updated
     * @type {number}
     * @memberof Agent
     */
    updatedAt: number;
    /**
     * Name of the agent
     * @type {string}
     * @memberof Agent
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Agent
     */
    description?: string | null;
    /**
     * Prompt for the agent
     * @type {string}
     * @memberof Agent
     */
    prompt: string;
    /**
     * Type of the agent
     * @type {AgentTypes}
     * @memberof Agent
     */
    type: AgentTypes;
    /**
     * 
     * @type {string}
     * @memberof Agent
     */
    apiEndpoint: string | null;
    /**
     * 
     * @type {string}
     * @memberof Agent
     */
    knowledgeBaseId: string | null;
    /**
     * 
     * @type {string}
     * @memberof Agent
     */
    athenaDatabase: string | null;
    /**
     * 
     * @type {string}
     * @memberof Agent
     */
    athenaQuery: string | null;
}



/**
 * Check if a given object implements the Agent interface.
 */
export function instanceOfAgent(value: object): value is Agent {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('prompt' in value) || value['prompt'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('apiEndpoint' in value) || value['apiEndpoint'] === undefined) return false;
    if (!('knowledgeBaseId' in value) || value['knowledgeBaseId'] === undefined) return false;
    if (!('athenaDatabase' in value) || value['athenaDatabase'] === undefined) return false;
    if (!('athenaQuery' in value) || value['athenaQuery'] === undefined) return false;
    return true;
}

export function AgentFromJSON(json: any): Agent {
    return AgentFromJSONTyped(json, false);
}

export function AgentFromJSONTyped(json: any, ignoreDiscriminator: boolean): Agent {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': json['created_at'],
        'updatedAt': json['updated_at'],
        'name': json['name'],
        'description': json['description'] == null ? undefined : json['description'],
        'prompt': json['prompt'],
        'type': AgentTypesFromJSON(json['type']),
        'apiEndpoint': json['api_endpoint'],
        'knowledgeBaseId': json['knowledge_base_id'],
        'athenaDatabase': json['athena_database'],
        'athenaQuery': json['athena_query'],
    };
}

export function AgentToJSON(json: any): Agent {
    return AgentToJSONTyped(json, false);
}

export function AgentToJSONTyped(value?: Agent | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'created_at': value['createdAt'],
        'updated_at': value['updatedAt'],
        'name': value['name'],
        'description': value['description'],
        'prompt': value['prompt'],
        'type': AgentTypesToJSON(value['type']),
        'api_endpoint': value['apiEndpoint'],
        'knowledge_base_id': value['knowledgeBaseId'],
        'athena_database': value['athenaDatabase'],
        'athena_query': value['athenaQuery'],
    };
}

