/* tslint:disable */
/* eslint-disable */
/**
 * Computer Vision Image Verification API
 * FastAPI backend for the Computer Vision Image Verification sample.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TotalCheckItemResult
 */
export interface TotalCheckItemResult {
    /**
     * The ID of the item being matched
     * @type {string}
     * @memberof TotalCheckItemResult
     */
    itemId: string;
    /**
     * The IDs of the files that match the item. the IDs will be located in the proceeding message before the file. Be extremely honest and critical of the chosen results
     * @type {Array<string>}
     * @memberof TotalCheckItemResult
     */
    fileIds: Array<string>;
    /**
     * Whether at least one image was found that matches the description. Be extremely honest and critical of this result.
     * @type {boolean}
     * @memberof TotalCheckItemResult
     */
    imageFound: boolean;
    /**
     * A complete image description, in the most verbose manner possible, matched against criteria of the item.  Be extremely honest and critical of this result.
     * @type {string}
     * @memberof TotalCheckItemResult
     */
    reasoning: string;
    /**
     * 
     * @type {number}
     * @memberof TotalCheckItemResult
     */
    confidence?: number | null;
    /**
     * 
     * @type {string}
     * @memberof TotalCheckItemResult
     */
    location?: string | null;
}

/**
 * Check if a given object implements the TotalCheckItemResult interface.
 */
export function instanceOfTotalCheckItemResult(value: object): value is TotalCheckItemResult {
    if (!('itemId' in value) || value['itemId'] === undefined) return false;
    if (!('fileIds' in value) || value['fileIds'] === undefined) return false;
    if (!('imageFound' in value) || value['imageFound'] === undefined) return false;
    if (!('reasoning' in value) || value['reasoning'] === undefined) return false;
    return true;
}

export function TotalCheckItemResultFromJSON(json: any): TotalCheckItemResult {
    return TotalCheckItemResultFromJSONTyped(json, false);
}

export function TotalCheckItemResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): TotalCheckItemResult {
    if (json == null) {
        return json;
    }
    return {
        
        'itemId': json['item_id'],
        'fileIds': json['file_ids'],
        'imageFound': json['image_found'],
        'reasoning': json['reasoning'],
        'confidence': json['confidence'] == null ? undefined : json['confidence'],
        'location': json['location'] == null ? undefined : json['location'],
    };
}

export function TotalCheckItemResultToJSON(json: any): TotalCheckItemResult {
    return TotalCheckItemResultToJSONTyped(json, false);
}

export function TotalCheckItemResultToJSONTyped(value?: TotalCheckItemResult | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'item_id': value['itemId'],
        'file_ids': value['fileIds'],
        'image_found': value['imageFound'],
        'reasoning': value['reasoning'],
        'confidence': value['confidence'],
        'location': value['location'],
    };
}

