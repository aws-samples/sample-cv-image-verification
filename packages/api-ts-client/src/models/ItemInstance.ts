/* tslint:disable */
/* eslint-disable */
/**
 * Computer Vision Image Verification API
 * FastAPI backend for the Computer Vision Image Verification sample.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AssessmentStatus } from './AssessmentStatus';
import {
    AssessmentStatusFromJSON,
    AssessmentStatusFromJSONTyped,
    AssessmentStatusToJSON,
    AssessmentStatusToJSONTyped,
} from './AssessmentStatus';
import type { LabelFilteringRule } from './LabelFilteringRule';
import {
    LabelFilteringRuleFromJSON,
    LabelFilteringRuleFromJSONTyped,
    LabelFilteringRuleToJSON,
    LabelFilteringRuleToJSONTyped,
} from './LabelFilteringRule';
import type { CollectionFileInstance } from './CollectionFileInstance';
import {
    CollectionFileInstanceFromJSON,
    CollectionFileInstanceFromJSONTyped,
    CollectionFileInstanceToJSON,
    CollectionFileInstanceToJSONTyped,
} from './CollectionFileInstance';
import type { DescriptionFilteringRule } from './DescriptionFilteringRule';
import {
    DescriptionFilteringRuleFromJSON,
    DescriptionFilteringRuleFromJSONTyped,
    DescriptionFilteringRuleToJSON,
    DescriptionFilteringRuleToJSONTyped,
} from './DescriptionFilteringRule';

/**
 * Represents an instance of an item being verified against a specific collection.
 * 
 * This model tracks the application of filtering rules to files and maintains
 * the assessment results, confidence scores, and approval status for the verification process.
 * @export
 * @interface ItemInstance
 */
export interface ItemInstance {
    /**
     * 
     * @type {string}
     * @memberof ItemInstance
     */
    id: string;
    /**
     * 
     * @type {number}
     * @memberof ItemInstance
     */
    createdAt: number;
    /**
     * 
     * @type {number}
     * @memberof ItemInstance
     */
    updatedAt: number;
    /**
     * 
     * @type {string}
     * @memberof ItemInstance
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ItemInstance
     */
    description: string;
    /**
     * 
     * @type {Array<LabelFilteringRule>}
     * @memberof ItemInstance
     */
    labelFilteringRulesApplied: Array<LabelFilteringRule>;
    /**
     * 
     * @type {Array<DescriptionFilteringRule>}
     * @memberof ItemInstance
     */
    descriptionFilteringRulesApplied: Array<DescriptionFilteringRule>;
    /**
     * 
     * @type {string}
     * @memberof ItemInstance
     */
    assessmentReasoning?: string | null;
    /**
     * 
     * @type {AssessmentStatus}
     * @memberof ItemInstance
     */
    status?: AssessmentStatus;
    /**
     * 
     * @type {Array<CollectionFileInstance>}
     * @memberof ItemInstance
     */
    approvedFiles?: Array<CollectionFileInstance>;
    /**
     * 
     * @type {string}
     * @memberof ItemInstance
     */
    address?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ItemInstance
     */
    confidence?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ItemInstance
     */
    itemId: string;
    /**
     * 
     * @type {string}
     * @memberof ItemInstance
     */
    resultsLog?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ItemInstance
     */
    clusterNumber?: number | null;
    /**
     * List of agent IDs that should be used for this item. Agents will process the item against the collection files and return results based on their specific logic.
     * @type {Array<string>}
     * @memberof ItemInstance
     */
    agentIds?: Array<string>;
}



/**
 * Check if a given object implements the ItemInstance interface.
 */
export function instanceOfItemInstance(value: object): value is ItemInstance {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('labelFilteringRulesApplied' in value) || value['labelFilteringRulesApplied'] === undefined) return false;
    if (!('descriptionFilteringRulesApplied' in value) || value['descriptionFilteringRulesApplied'] === undefined) return false;
    if (!('itemId' in value) || value['itemId'] === undefined) return false;
    return true;
}

export function ItemInstanceFromJSON(json: any): ItemInstance {
    return ItemInstanceFromJSONTyped(json, false);
}

export function ItemInstanceFromJSONTyped(json: any, ignoreDiscriminator: boolean): ItemInstance {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': json['created_at'],
        'updatedAt': json['updated_at'],
        'name': json['name'],
        'description': json['description'],
        'labelFilteringRulesApplied': ((json['label_filtering_rules_applied'] as Array<any>).map(LabelFilteringRuleFromJSON)),
        'descriptionFilteringRulesApplied': ((json['description_filtering_rules_applied'] as Array<any>).map(DescriptionFilteringRuleFromJSON)),
        'assessmentReasoning': json['assessment_reasoning'] == null ? undefined : json['assessment_reasoning'],
        'status': json['status'] == null ? undefined : AssessmentStatusFromJSON(json['status']),
        'approvedFiles': json['approved_files'] == null ? undefined : ((json['approved_files'] as Array<any>).map(CollectionFileInstanceFromJSON)),
        'address': json['address'] == null ? undefined : json['address'],
        'confidence': json['confidence'] == null ? undefined : json['confidence'],
        'itemId': json['item_id'],
        'resultsLog': json['results_log'] == null ? undefined : json['results_log'],
        'clusterNumber': json['cluster_number'] == null ? undefined : json['cluster_number'],
        'agentIds': json['agent_ids'] == null ? undefined : json['agent_ids'],
    };
}

export function ItemInstanceToJSON(json: any): ItemInstance {
    return ItemInstanceToJSONTyped(json, false);
}

export function ItemInstanceToJSONTyped(value?: ItemInstance | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'created_at': value['createdAt'],
        'updated_at': value['updatedAt'],
        'name': value['name'],
        'description': value['description'],
        'label_filtering_rules_applied': ((value['labelFilteringRulesApplied'] as Array<any>).map(LabelFilteringRuleToJSON)),
        'description_filtering_rules_applied': ((value['descriptionFilteringRulesApplied'] as Array<any>).map(DescriptionFilteringRuleToJSON)),
        'assessment_reasoning': value['assessmentReasoning'],
        'status': AssessmentStatusToJSON(value['status']),
        'approved_files': value['approvedFiles'] == null ? undefined : ((value['approvedFiles'] as Array<any>).map(CollectionFileInstanceToJSON)),
        'address': value['address'],
        'confidence': value['confidence'],
        'item_id': value['itemId'],
        'results_log': value['resultsLog'],
        'cluster_number': value['clusterNumber'],
        'agent_ids': value['agentIds'],
    };
}

